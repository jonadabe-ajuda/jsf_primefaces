package br.com.ajuda.erp.mb.admCadastro;import java.io.FileWriter;import java.io.IOException;import java.io.Serializable;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.StringTokenizer;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.faces.application.FacesMessage;import javax.faces.bean.ManagedBean;import javax.faces.bean.ManagedProperty;import javax.faces.bean.ViewScoped;import javax.faces.context.FacesContext;import org.primefaces.context.RequestContext;import org.primefaces.event.FileUploadEvent;import org.primefaces.event.TabChangeEvent;import br.com.ajuda.erp.adm.PessoasComando;import br.com.ajuda.erp.cep.CEPServiceRemote;import br.com.ajuda.erp.converter.CnaeConverter;import br.com.ajuda.erp.converter.DepartamentoConverter;import br.com.ajuda.erp.converter.IBGEMunicipiosConverter;import br.com.ajuda.erp.converter.IBGEUfConverter;import br.com.ajuda.erp.converter.PessoaTipoClienteConverter;import br.com.ajuda.erp.converter.PessoaTipoColaboradorConverter;import br.com.ajuda.erp.converter.PessoaTipoConverter;import br.com.ajuda.erp.converter.PessoaTipoFornecedorConverter;import br.com.ajuda.erp.converter.PessoaTipoIndicadorConverter;import br.com.ajuda.erp.converter.PessoaTipoProfessorConverter;import br.com.ajuda.erp.converter.PessoaTipoRepresentanteConverter;import br.com.ajuda.erp.converter.PessoaTipoTransportadoraConverter;import br.com.ajuda.erp.converter.PessoaTipoVendedorConverter;import br.com.ajuda.erp.converter.PessoasHorariosConverter;import br.com.ajuda.erp.delegate.FinanceiroDelegate;import br.com.ajuda.erp.delegate.PessoasDelegate;import br.com.ajuda.erp.mb.DadosSistemaMB;import br.com.ajuda.erp.nfe_400.NFeConfigNFe;import br.com.ajuda.erp.persistencia.Cnae;import br.com.ajuda.erp.persistencia.Departamentos;import br.com.ajuda.erp.persistencia.FinanMovPagRec;import br.com.ajuda.erp.persistencia.GradeCursosAlunos;import br.com.ajuda.erp.persistencia.IBGEMunicipios;import br.com.ajuda.erp.persistencia.IBGEUf;import br.com.ajuda.erp.persistencia.Pessoas;import br.com.ajuda.erp.persistencia.PessoasAssistMedica;import br.com.ajuda.erp.persistencia.PessoasContato;import br.com.ajuda.erp.persistencia.PessoasContatoTipo;import br.com.ajuda.erp.persistencia.PessoasDocumentos;import br.com.ajuda.erp.persistencia.PessoasEndereco;import br.com.ajuda.erp.persistencia.PessoasFgtsOcorrencia;import br.com.ajuda.erp.persistencia.PessoasFiscalCnaes;import br.com.ajuda.erp.persistencia.PessoasFuncao;import br.com.ajuda.erp.persistencia.PessoasHorarios;import br.com.ajuda.erp.persistencia.PessoasLogin;import br.com.ajuda.erp.persistencia.PessoasPessoaTipo;import br.com.ajuda.erp.persistencia.PessoasSindicato;import br.com.ajuda.erp.persistencia.PessoasTipo;import br.com.ajuda.erp.persistencia.PessoasTipoContrato;import br.com.ajuda.erp.persistencia.SerasaCadastro;import br.com.ajuda.erp.persistencia.SerasaCredito;import br.com.ajuda.erp.persistencia.SystemSearch;import br.com.ajuda.erp.persistencia.TipoPessoaContato;import br.com.ajuda.erp.service.calculoDistancia.VerificarLatitudeWS;import br.com.ajuda.erp.util.TratamentoArquivos;import br.com.ajuda.erp.util.TratamentoCampos;import br.com.ajuda.erp.util.Validador;import br.com.serasa.sitenet05.wsgestordecisao.wsgestordecisao.WsSerasaCadastro;import br.com.serasa.sitenet05.wsgestordecisao.wsgestordecisao.WsSerasaCredito;@ManagedBean@ViewScopedpublic class PessoasCadastroMB  extends PessoasComando implements Serializable {	private static final long serialVersionUID = 1L;    private String arquivoSerasaReprocidade;		private Pessoas pes = new Pessoas();	private SystemSearch systemSearchSelected;	private String systemSearchConteudo;	private String inscFederalValidador;	private String inscEstadualValidador;	private String inscFederalValidador_Segunda;	private String inscEstadualValidador_Segunda;		private int tipoOperacao = 0; // -- 0 - Sem operacao 1 - inclusao e 2 - alteracao		List<PessoasPessoaTipo> listaPessoasTipoBusca;	List<TipoPessoaContato> listaTipoContatoSelected;	List<String> listaTabAcessada;	private List<PessoasPessoaTipo> filterPessoasTipoBusca;		private PessoasContato pessoaContatoSelected;	private Pessoas pessoasValidador;	private int pessoaTipoBuscaSelected;		private DataModelPessoasTipo dataModelPessoasTipo;		@EJB	CEPServiceRemote cep;	    @ManagedProperty(value="#{dadosSistemaMB}")	private DadosSistemaMB dadosSistema;	@PostConstruct    public void setOpcao() {				arquivoSerasaReprocidade = "";		inscFederalValidador = "";		inscEstadualValidador = "";		inscFederalValidador_Segunda = "";		inscEstadualValidador_Segunda = "";				listaPessoasTipoBusca = new ArrayList<PessoasPessoaTipo>();		listaTabAcessada = new ArrayList<String>();		pPessoaTipoSelected = null;			seColaborador = 0;		seVendedor = 0;		if (dadosSistema.getSubModulo() == 6 ) {			seColaborador = 1;			if(!listaPessoasTipoTela.isEmpty()){				listaPessoasTipoTela.clear();			}			listaPessoasTipoTela.add("3");		} else if ( dadosSistema.getModulo() == 10) {			if(!listaPessoasTipoTela.isEmpty()){				listaPessoasTipoTela.clear();			}			listaPessoasTipoTela.add("1");					}		    	setCampos(dadosSistema.getUsuario());    	    	DepartamentoConverter.getDeptoCompelte(0,dadosSistema.getUsuario());    	PessoaTipoClienteConverter.listaPessoasTipo = PessoasDelegate.getInstance().recuperarPessoasTipo(2, dadosSistema.getUsuario().getNomeConexao());    	PessoaTipoFornecedorConverter.listaPessoasTipo = PessoasDelegate.getInstance().recuperarPessoasTipo(3, dadosSistema.getUsuario().getNomeConexao());    	//PessoaTipoConverter.getPessoaTipo(0);    	    	// -- Verificar o tipo de pessoa conforme a rotina    	try {    		pessoaTipoBuscaSelected = dadosSistema.getSystemMenuRotina().getPessoasTipo().getIDPessoasTipo();    		if ( dadosSistema.getSystemMenuRotina().getPessoasTipo().getFisicaOUJuridica() == 1 ) {    			pessoaTipo = 'F';    		} else {    			pessoaTipo = 'J';    		}		} catch (Exception e) {			pessoaTipoBuscaSelected = 0;		}    	    	// -- botao é para o sistema da escola, 2 é cliente (aluno)    	if ( pessoaTipoBuscaSelected != 2 ) {    		showBotaoSetarPessoa = false;    	}    	    	dataModelPessoasTipo = new DataModelPessoasTipo();    	    }		public void getListaPessoasBusca () {		//		if ( (dadosSistema.getSubModulo() == 6) && ( pessoaTipoBuscaSelected == 0)) {//			pessoaTipoBuscaSelected = 310;//		} 					dataModelPessoasTipo = new DataModelPessoasTipo();		if ( systemSearchSelected != null ) {			systemSearchSelected.setConteudoBusca(systemSearchConteudo);			systemSearchSelected.setTipoPessoaBusca(pessoaTipoBuscaSelected);			listaPessoasTipoBusca = PessoasDelegate.getInstance().recuperarListaPessoasBusca(systemSearchSelected, dadosSistema.getUsuario().getNomeConexao());					}				listaPessoas = new ArrayList<Pessoas>();		for ( PessoasPessoaTipo p : listaPessoasTipoBusca ) {			listaPessoas.add(p.getPessoas());		}				dataModelPessoasTipo = new DataModelPessoasTipo(listaPessoasTipoBusca);	}	public void getPessoaSelected () {				mensaTela = "";				if ( getPessoasSelected() != null) {			//pessoas = pPessoaTipoSelected.getPessoas();			pessoas = PessoasDelegate.getInstance().recuperarPessoa(pPessoaTipoSelected.getPessoas(),dadosSistema.getUsuario().getNomeConexao());		}				listaPessoasTipoTela.clear();		for ( PessoasPessoaTipo pTipo : pessoas.getPessoasPessoaTipos() ) {			listaPessoasTipoTela.add(Integer.toString(pTipo.getPessoasTipo().getIDPessoasTipo()));			if ( pTipo.getPessoasTipo().getIDPessoasTipo() == 1) {				pessoasEmpresa = pessoas.getPessoasEmpresaAtivas();				produtoTipoSelected = pessoasEmpresa.getProdutoConsumoPadrao();				servicoTipoSelected = pessoasEmpresa.getServicoConsumoPadrao();				impCfopPadraoVendas = pessoasEmpresa.getImpCfopPadraoVendas();				tipoPesSitFinanSelected = pessoasEmpresa.getTipoPesSitFinanPadrao();			}			if (dadosSistema.getQualSistemaERPA() == 3) {				showBotaoSetarPessoa = false;				pessoasLogin = PessoasDelegate.getInstance().recuperarPessoasLogin(new PessoasLogin(pessoas), dadosSistema.getUsuario().getNomeConexao());				if ( pessoasLogin.getIDPessoaLogin() == null ) {					pessoasLogin.setNomeLogin(pessoas.getInscFederal());					pessoasLogin.setDepartamento(new Departamentos(1));					pessoasLogin.setDescCargo("Professor");					pessoasLogin.setPessoaUsuario(pessoas);				}				}					}		if ( dadosSistema.getQualSistemaERPA() != 3) {			getCampos();			} 				// -- Setando a pessoa do validator		inscFederalValidador = pessoas.getInscFederal();			inscEstadualValidador  = pessoas.getInscEstadual();				// -- Banco movimento		valorInicialBancoMov = pessoasEmpresa.getValorInicialBancoMov();		fBancosContasSelected = pessoasEmpresa.getFinanBancosContas();		FinanMovPagRec fPGFind = new FinanMovPagRec();		fPGFind.setSituacao(1);		fMovPagRecPrimeiroLanc = FinanceiroDelegate.getInstance().recuperaFinanPrimeiroMovPagRec(fPGFind, dadosSistema.getUsuario().getNomeConexao());		try {			dataInicialBancoMov =  fMovPagRecPrimeiroLanc.getDataMovimento();					if ( fMovPagRecPrimeiroLanc.getDescricaoMovimentacao() == null )  fMovPagRecPrimeiroLanc.setDescricaoMovimentacao("") ; 			if ( fMovPagRecPrimeiroLanc.getDescricaoMovimentacao().isEmpty() ) {				if (fMovPagRecPrimeiroLanc.getPedidosConsumo() != null)  fMovPagRecPrimeiroLanc.setDescricaoMovimentacao("Pedido Compra Numero " + fMovPagRecPrimeiroLanc.getPedidosConsumo().getNumeroMovimento() );				if (fMovPagRecPrimeiroLanc.getPedidosVendas() != null)  fMovPagRecPrimeiroLanc.setDescricaoMovimentacao("Pedido Vendas Numero " + fMovPagRecPrimeiroLanc.getPedidosVendas().getNumeroPedido() );							}		} catch (Exception e) {			dataInicialBancoMov =  new Date();		}						if ( pessoas.getIDPessoa() != null ) {			tipoOperacao = 1;		} else {			tipoOperacao = 2;		}				// -- Verificar se e cadastro de empresas		if ( pessoas.getIDPessoasTipo() == 1 ) {			pessoasColaborador = pessoas.getPessoasEmpresaAtivas().getPessoaAdm();			if ( pessoasColaborador != null ) {				inscFederalValidador_Segunda = pessoasColaborador.getInscFederal();						inscEstadualValidador_Segunda = pessoasColaborador.getInscEstadual();				PessoasContato pContatoFind = new PessoasContato();				pContatoFind.setPessoas(pessoasColaborador);				for ( PessoasContato pContato : PessoasDelegate.getInstance().recuperarPessoaContato(pContatoFind, dadosSistema.getUsuario().getNomeConexao()) ) {					pessoasContatoColaborador = pContato;					break;				}				pessoasLogin = PessoasDelegate.getInstance().recuperarPessoasLogin(new PessoasLogin(pessoasColaborador), dadosSistema.getUsuario().getNomeConexao());			} else {				pessoasColaborador = new Pessoas();			}		}			}		public void getPessoaSelectedTelaDetalhe () { 				getCamposTelaDetalhe();		if ( pessoasContato != null ) {			listaTipoContatoSelected = new ArrayList<TipoPessoaContato>();			for ( PessoasContatoTipo pContatoTipo : pessoasContato.getListaSetTipos() ) {				listaTipoContatoSelected.add(pContatoTipo.getTipoPessoaContato());			}				pessoaVendAtendeCliente  = PessoasDelegate.getInstance().recuperarPessoaVendedorCliente(pessoas, pessoasLoginConexao.getNomeConexao());		}		// -- Setando a pessoa do validator		inscFederalValidador = pessoas.getInscFederal();			inscEstadualValidador  = pessoas.getInscEstadual();						}		public void getPessoaSelectedSimples () { 				mensaTela = "";		if ( getPessoasSelected() != null) {			pessoas = PessoasDelegate.getInstance().recuperarPessoa(pPessoaTipoSelected.getPessoas(),dadosSistema.getUsuario().getNomeConexao());		}			listaPessoasTipoTela.clear();		for ( PessoasPessoaTipo pTipo : pessoas.getPessoasPessoaTipos() ) {			listaPessoasTipoTela.add(Integer.toString(pTipo.getPessoasTipo().getIDPessoasTipo()));			if ( pTipo.getPessoasTipo().getIDPessoasTipo() == 1) {				pessoasEmpresa = pessoas.getPessoasEmpresaAtivas();				impCfopPadraoVendas = pessoasEmpresa.getImpCfopPadraoVendas();			}		}		getCamposTelaDetalhe();					// -- Setando a pessoa do validator		inscFederalValidador = pessoas.getInscFederal();			inscEstadualValidador  = pessoas.getInscEstadual();					if ( pessoas.getIDPessoa() != null ) {			tipoOperacao = 1;		} else {			tipoOperacao = 2;		}			}		public void getColaboradorSelected () {		mensaTela = "";		if ( getPessoasSelected() != null) {			pessoas = PessoasDelegate.getInstance().recuperarPessoa(pPessoaTipoSelected.getPessoas(),dadosSistema.getUsuario().getNomeConexao());		}		pessoasLogin = PessoasDelegate.getInstance().recuperarPessoasLogin(new PessoasLogin(pessoas), dadosSistema.getUsuario().getNomeConexao());		if ( pessoasLogin.getIDPessoaLogin() == null ) {			pessoasLogin.setNomeLogin(pessoas.getInscFederal());			pessoasLogin.setDepartamento(new Departamentos(1));			pessoasLogin.setDescCargo("Colaborador");			pessoasLogin.setPessoaUsuario(pessoas);		}				listaPessoasTipoTela.clear();		for ( PessoasPessoaTipo pTipo : pessoas.getPessoasPessoaTipos() ) {			listaPessoasTipoTela.add(Integer.toString(pTipo.getPessoasTipo().getIDPessoasTipo()));			if ( pTipo.getPessoasTipo().getIDPessoasTipo() == 1) {				pessoasEmpresa = pessoas.getPessoasEmpresaAtivas();				impCfopPadraoVendas = pessoasEmpresa.getImpCfopPadraoVendas();			}		}		getColaboradorCampos();					// -- Setando a pessoa do validator		inscFederalValidador = pessoas.getInscFederal();			inscEstadualValidador  = pessoas.getInscEstadual();					if ( pessoas.getIDPessoa() != null ) {			tipoOperacao = 1;		} else {			tipoOperacao = 2;		}			}			public void onTabChange(TabChangeEvent event) {		if ( pessoas.getIDPessoa() != null ) {	        if ( !listaTabAcessada.contains(event.getTab().getId()) ) {	        	if ( "contatosEscola".equalsIgnoreCase(event.getTab().getId())) {	        		loadContatos();	        		listaTabAcessada.add(event.getTab().getId());	        	} else if ( "enderecosEscola".equalsIgnoreCase(event.getTab().getId())) {	        		loadEnderecos();	        		listaTabAcessada.add(event.getTab().getId());	        	} else if ( "cursos".equalsIgnoreCase(event.getTab().getId())) {	        		listaTabAcessada.add(event.getTab().getId());        			        	}	        } 		}    }		    @SuppressWarnings({ "unchecked", "rawtypes" })	public List<PessoasPessoaTipo> completePessoas (String query) {    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();   	    	pessoas.setNome(query);    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoConverter.getPessoaTipo(0, dadosSistema.getUsuario())) {    		if ( !query.equalsIgnoreCase("todos") ) {	    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			if ( (pessoaTipo.getPessoasTipo().getIDPessoasTipo() != 1) && (pessoaTipo.getPessoas().getIDPessoa() != 2))  {	    				resultado.add(pessoaTipo);   				    			} 				    		}    			    		} else {			    resultado.add(pessoaTipo);    			    		}    	}    	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	return resultado;    }	        @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasCliente (String query) {    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();    	pessoas.setNome(query);    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoConverter.getPessoaTipo(2,dadosSistema.getUsuario())) {       		if ( !query.equalsIgnoreCase("todos") ) {	    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			resultado.add(pessoaTipo);   				    		}    		} else {    			resultado.add(pessoaTipo);	    		}    	}    	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	    	return resultado;    }         @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasProfessor (String query) {    	PessoaTipoProfessorConverter.listaPessoasTipo = PessoasDelegate.getInstance().recuperarPessoasTipo(8, dadosSistema.getUsuario().getNomeConexao());    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();    	pessoas.setNome(query);    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoProfessorConverter.listaPessoasTipo) {       		if ( !query.equalsIgnoreCase("todos") ) {	    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			resultado.add(pessoaTipo);   				    		}    		} else {    			resultado.add(pessoaTipo);	    		}    	}    	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	    	    	    	return resultado;    }              @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasClienteNacional (String query) {    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();    	pessoas.setNome(query);     	for (PessoasPessoaTipo pessoaTipo : PessoaTipoClienteConverter.listaPessoasTipo) {     		if ( !"todos".equalsIgnoreCase(query) ) {	    		if ( TratamentoCampos.VerificarSeENumero(query) ) {	    			if ( pessoaTipo.getPessoas().getInscFederal().toLowerCase().contains(query.toLowerCase())) {		    			if ( pessoaTipo.getPessoas().getIdPais() == 1)  resultado.add(pessoaTipo);   				    		}	    		} else {		    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {		    			if ( pessoaTipo.getPessoas().getIdPais() == 1)  resultado.add(pessoaTipo);   				    		}	    		}    		} else {	    		if ( pessoaTipo.getPessoas().getIdPais() == 1)  resultado.add(pessoaTipo);   		    		}    	}    		     	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	    	return resultado;    }             @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasClienteInternacional (String query) {    	PessoaTipoClienteConverter.listaPessoasTipo = PessoasDelegate.getInstance().recuperarPessoasTipo(2, dadosSistema.getUsuario().getNomeConexao());    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();    	pessoas.setNome(query);		if ( !"todos".equalsIgnoreCase(query) ) {	    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoClienteConverter.getListaConteudo(query,dadosSistema.getUsuario())) { 	    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			if ( pessoaTipo.getPessoas().getIdPais() != 1)  resultado.add(pessoaTipo);   			    		}	    	}		} else {	    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoClienteConverter.listaPessoasTipo) { 	    		if ( pessoaTipo.getPessoas().getIdPais() != 1)  resultado.add(pessoaTipo);   			    	}					}    	    	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });      	    	    	return resultado;    }         @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasVendedor (String query) {    	    	PessoaTipoVendedorConverter.listaPessoasTipo = PessoasDelegate.getInstance().recuperarPessoasTipo(6, dadosSistema.getUsuario().getNomeConexao());    	    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();    	pessoas.setNome(query);    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoVendedorConverter.listaPessoasTipo) {    		if ( !query.equalsIgnoreCase("todos") ) {    			    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			resultado.add(pessoaTipo);   				    		}    		} else {    			resultado.add(pessoaTipo);	    		}    	}  	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	    	    	    	return resultado;    }             public List<PessoasPessoaTipo> completePessoasFornecedor (String query) {    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();    	pessoas.setNome(query);		if ( !"todos".equalsIgnoreCase(query) ) {	    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoFornecedorConverter.getListaConteudo(query,dadosSistema.getUsuario())) { 	    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			resultado.add(pessoaTipo);   			    		}	    	}		} else {	    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoFornecedorConverter.listaPessoasTipo) {     			resultado.add(pessoaTipo);   			    	}					}    	    	return resultado;    }	 	    @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasColaborador (String query) {    	PessoaTipoColaboradorConverter.listaPessoasTipo = PessoasDelegate.getInstance().recuperarPessoasTipo(4, dadosSistema.getUsuario().getNomeConexao());    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();    	pessoas.setNome(query);    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoColaboradorConverter.listaPessoasTipo) {    		if ( !query.equalsIgnoreCase("todos") ) {	    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			if (!pessoaTipo.getPessoas().getNome().equals("admin") ) resultado.add(pessoaTipo);   				    		}    		} else {    			if (!pessoaTipo.getPessoas().getNome().equals("admin") ) resultado.add(pessoaTipo);	    		}    	}    	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	    	    	    	return resultado;    }          @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasRepresentante (String query) {    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();	    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoRepresentanteConverter.listaPessoasTipo) {    		if ( !query.equalsIgnoreCase("todos") ) {	    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			resultado.add(pessoaTipo);   				    		}    		} else {    			    		}    	}    	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	    	    	    	return resultado;    }           @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasIndicador (String query) {    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();	    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoIndicadorConverter.listaPessoasTipo) {   	    		if ( !query.equalsIgnoreCase("todos") ) {	    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			resultado.add(pessoaTipo);   				    		}    		} else {    			resultado.add(pessoaTipo);	    		}    	}    	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	    	    	    	return resultado;    }           @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasTransportadora (String query) {    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();    	PessoaTipoTransportadoraConverter.listaPessoasTipo = PessoasDelegate.getInstance().recuperarPessoasTipo(7, dadosSistema.getUsuario().getNomeConexao());	    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoTransportadoraConverter.listaPessoasTipo) {      		if ( !query.equalsIgnoreCase("todos") ) {    			    		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {	    			resultado.add(pessoaTipo);   				    		}    		} else {    			resultado.add(pessoaTipo);	    		}    	}    	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	    	    	    	return resultado;    }           @SuppressWarnings({ "unchecked", "rawtypes" })    public List<PessoasPessoaTipo> completePessoasEmpresa (String query) {    	List<PessoasPessoaTipo> resultado = new ArrayList<PessoasPessoaTipo>();    	pessoas.setNome(query);    	for (PessoasPessoaTipo pessoaTipo : PessoaTipoConverter.getPessoaTipo(1,dadosSistema.getUsuario())) {      		if ( pessoaTipo.getPessoas().getNome().toLowerCase().contains(query.toLowerCase())) {    			resultado.add(pessoaTipo);   			    		}    	}    	        Collections.sort (resultado, new Comparator() {            public int compare(Object o1, Object o2) {            	PessoasPessoaTipo c1 = (PessoasPessoaTipo) o1;            	PessoasPessoaTipo c2 = (PessoasPessoaTipo) o2;                return c1.getPessoas().getNome().compareToIgnoreCase(c2.getPessoas().getNome());              }        });    	    	    	    	    	return resultado;    }                 public List<Cnae> completeCnae (String query) {    	List<Cnae> resultado = new ArrayList<Cnae>();    	for (Cnae cnae : CnaeConverter.listaCnae) {      		if ( cnae.getCodigo().toLowerCase().contains(query.toLowerCase())) {    			resultado.add(cnae);   			    		}    	}    	return resultado;    }         	public void save() {				mensaTela = "";		pessoasValidador = new Pessoas();				if (pessoas.getIDPessoa() == null ) listaPessoasTipoTela.add(Integer.toString(pessoaTipoBuscaSelected));				if ( pessoas == null ) {			mensaTela = "Digitar o nome ou buscar";		} else if ( pessoas.getNome() == null ) {			mensaTela = "Digitar o nome ou buscar";		}  else if ( listaPessoasTipoTela.isEmpty() ) {			mensaTela = "Escolher o tipo de pessoa.";					} else {			if ( pessoaTipo == 'J') {				if ( !inscFederalValidador.replaceAll("[^0-9]", "").equals(pessoas.getInscFederal().replaceAll("[^0-9]", ""))) {					mensaTela = Validador.ValidaCNPJ(pessoas.getInscFederal().replaceAll("[^0-9]", ""),pessoas.getInscFederal());									}			} else {				if ( !inscFederalValidador.replaceAll("[^0-9]", "").equals(pessoas.getInscFederal().replaceAll("[^0-9]", ""))) {					pessoasValidador = Validador.ValidaCPF(pessoas.getInscFederal().replaceAll("[^0-9]", ""),pessoas.getInscFederal());				    mensaTela = pessoasValidador.getMensaValidaInscFederal();			    				}			}						if ( ( (mensaTela.isEmpty()) && (dadosSistema.getQualSistemaERPA() != 3)) )				 if ( !pessoas.getInscEstadual().isEmpty() ) {					 if ( !inscEstadualValidador.replaceAll("[^0-9]", "").equals(pessoas.getInscEstadual().replaceAll("[^0-9]", ""))) {						 mensaTela = Validador.ValidaInscEstadual(pessoas.getInscEstadual(),pessoas.getInscEstadual());					 }				 } else {					 pessoas.setInscEstadual("0");				 }								}				if ( mensaTela.isEmpty() ) {						this.pessoas.setListaSetCursos(new HashSet<GradeCursosAlunos>());			if ( dadosSistema.getQualSistemaERPA() == 3 ) {				pessoas.setPessoasPessoaTipos(new HashSet<PessoasPessoaTipo>());				pessoas.setListaSetDocumento(null);				pessoas.setListaSetSerasaCredito(null);				pessoas.setListaSetBloqueios(null);				pessoas.setListaSetFiscalCnaes(null);							}			if ( this.pessoas.getIDPessoa() == null ) {				this.pessoas.setPessoasUsuarioInclusao(dadosSistema.getUsuario().getPessoaUsuario());				this.pessoas.setPessoasUsuarioAlteracao(null);				this.pessoas.setDataInclusao(new Date());				// -- Setando padroes				this.pessoas.setTipoPessoaSituacaoFinan(dadosSistema.getEmpresa().getTipoPesSitFinanPadrao());							} else {								this.pessoas.setPessoasUsuarioAlteracao(dadosSistema.getUsuario().getPessoaUsuario());				this.pessoas.setDataAlteracao(new Date());							}						try {				if ( pessoas.getApelido().isEmpty() ) pessoas.setApelido(pessoas.getNome());				} catch (Exception e) {				pessoas.setApelido(pessoas.getNome());			}										salvarPessoas();			// -- Setando a pessoa do validator			inscFederalValidador = pessoas.getInscFederal();				inscEstadualValidador  = pessoas.getInscEstadual();						} else {			if (pessoasValidador.getIDPessoa() != null )  {				for ( PessoasPessoaTipo pTipo : PessoasDelegate.getInstance().recuperarPessoasTipoPes(pessoasValidador.getIDPessoa(), dadosSistema.getUsuario().getNomeConexao())) {					if ( pTipo.getPessoasTipo().getIDPessoasTipo() == pessoaTipoBuscaSelected ) {						pessoasValidador.setDescricaoHistorico("");						break;					} else {						pessoasValidador.setDescricaoHistorico(pessoasValidador.getDescricaoHistorico()+" | "+pTipo.getPessoasTipo().getDescricao());					}				}				if ( !pessoasValidador.getDescricaoHistorico().isEmpty() ) {					pessoasValidador.setDescricaoHistorico(pessoasValidador.getDescricaoHistorico().replace("null |", ""));					RequestContext.getCurrentInstance().execute("PF('modalProcessar').hide()");					RequestContext.getCurrentInstance().execute("PF('dlCadSalvarOutroTipo').show()");				}			}		}					}		public void replicarDadosPessoasEntreEmpresas () {				String retorno = "";		pessoaTipoBuscaSelected = 3;		retorno = PessoasDelegate.getInstance().replicarDadosPessoasEntreEmpresas(pessoaTipoBuscaSelected, dadosSistema.getUsuario().getNomeConexao());						System.out.println("retorno == " + retorno);	}		public void saveColaboradorSimples () {		mensaTela = "";		listaPessoasTipoTela.add(Integer.toString(pessoaTipoBuscaSelected));		pessoasValidador = new Pessoas();		if ( pessoas == null ) {			mensaTela = "Digitar o nome ou buscar";		} else if ( pessoas.getNome() == null ) {			mensaTela = "Digitar o nome ou buscar";		}  else if ( listaPessoasTipoTela.isEmpty() ) {			mensaTela = "Escolher o tipo de pessoa.";		} else if ( (!pessoasContato.getEmailPrincipal().isEmpty()) && (pessoasContato.getEmailPrincipal().length() < 3 ) ) {			mensaTela = "Email inválido";		} else if ( !pessoasEndereco.getEndereco().isEmpty()) {			if ( pessoasEndereco.getCep().replaceAll("\\D", "").length() != 8 ) {				this.mensaTela = "Cep incorreto.";					} else if ( pessoasEndereco.getEndereco().length() < 2 ) {				this.mensaTela = "Logradouro incorreto.";			} else if ( pessoasEndereco.getIdUf() == null ) {				this.mensaTela = "Estado incorreto.";			} else if ( pessoasEndereco.getIdMunicipios() == null ) {				this.mensaTela = "Escolher municipio";						} else {				pessoasEndereco.setCep(pessoasEndereco.getCep().replaceAll("\\D", ""));				pessoasEndereco.setTipo("C");				listaPessoasEnderecos.add(pessoasEndereco);			}		} else {			if ( !inscFederalValidador.replaceAll("[^0-9]", "").equals(pessoas.getInscFederal().replaceAll("[^0-9]", ""))) {				pessoasValidador = Validador.ValidaCPF(pessoas.getInscFederal().replaceAll("[^0-9]", ""),pessoas.getInscFederal());				mensaTela = pessoasValidador.getMensaValidaInscFederal();			}			// -- Verificar se é vendedor//			if ( seVendedor == 1 ) {//				if ( pessoasVendedor.getComissaoValor().compareTo(BigDecimal.ZERO) == 0 ) {//					mensaTela = "O colaborador, está como vendedor, mais está sem o valor de comissão, por favor colocar.";//				}//			}					}		if ( mensaTela.isEmpty() ) {			this.pessoas.setListaSetCursos(new HashSet<GradeCursosAlunos>());			pessoas.setPessoasPessoaTipos(new HashSet<PessoasPessoaTipo>());			pessoas.setListaSetDocumento(null);			pessoas.setListaSetSerasaCredito(null);			pessoas.setListaSetBloqueios(null);			pessoas.setListaSetFiscalCnaes(null);			if ( this.pessoas.getIDPessoa() == null ) {				this.pessoas.setPessoasUsuarioInclusao(dadosSistema.getUsuario().getPessoaUsuario());				this.pessoas.setPessoasUsuarioAlteracao(null);				this.pessoas.setDataInclusao(new Date());			} else {				this.pessoas.setPessoasUsuarioAlteracao(dadosSistema.getUsuario().getPessoaUsuario());				this.pessoas.setDataAlteracao(new Date());							}						try {				if ( pessoas.getApelido().isEmpty() ) pessoas.setApelido(pessoas.getNome());				} catch (Exception e) {				pessoas.setApelido(pessoas.getNome());			}							if ( (!pessoasContato.getEmailPrincipal().isEmpty()) || (pessoasContato.getTel1Numero() > 0) ) {				listaPessoasContatos.add(pessoasContato);			}						salvarColaboradorSimples();			// -- Setando a pessoa do validator			inscFederalValidador = pessoas.getInscFederal();				inscEstadualValidador  = pessoas.getInscEstadual();							for ( PessoasPessoaTipo pPesTipo : pessoas.getPessoasPessoaTipos() ) {				if ( pPesTipo.getPessoasTipo().getIDPessoasTipo() == 4 ) {					PessoaTipoColaboradorConverter.listaPessoasTipo.add(pPesTipo);					break;				}			}					}  else {			if (pessoasValidador.getIDPessoa() != null )  {				for ( PessoasPessoaTipo pTipo : PessoasDelegate.getInstance().recuperarPessoasTipoPes(pessoasValidador.getIDPessoa(), dadosSistema.getUsuario().getNomeConexao())) {					if ( pTipo.getPessoasTipo().getIDPessoasTipo() == pessoaTipoBuscaSelected ) {						pessoasValidador.setDescricaoHistorico("");						break;					} else {						pessoasValidador.setDescricaoHistorico(pessoasValidador.getDescricaoHistorico()+" | "+pTipo.getPessoasTipo().getDescricao());					}				}				if ( !pessoasValidador.getDescricaoHistorico().isEmpty() ) {					pessoasValidador.setDescricaoHistorico(pessoasValidador.getDescricaoHistorico().replace("null |", ""));					RequestContext.getCurrentInstance().execute("PF('modalProcessar').hide()");					RequestContext.getCurrentInstance().execute("PF('dlCadSalvarOutroTipoCol').show()");				}			}		}			}				public void savePessoasSimples () {		mensaTela = "";		listaPessoasTipoTela.add(Integer.toString(pessoaTipoBuscaSelected));		pessoasValidador = new Pessoas();		if ( pessoas == null ) {			mensaTela = "Digitar o nome ou buscar";		} else if ( pessoas.getNome() == null ) {			mensaTela = "Digitar o nome ou buscar";		}  else if ( listaPessoasTipoTela.isEmpty() ) {			mensaTela = "Escolher o tipo de pessoa.";		} else if ( (!pessoasContato.getEmailPrincipal().isEmpty()) && (pessoasContato.getEmailPrincipal().length() < 3 ) ) {			mensaTela = "Email inválido";		} else if ( !pessoasEndereco.getEndereco().isEmpty()) {			if ( pessoasEndereco.getCep().replaceAll("\\D", "").length() != 8 ) {				this.mensaTela = "Cep incorreto.";					} else if ( pessoasEndereco.getEndereco().length() < 2 ) {				this.mensaTela = "Logradouro incorreto.";			} else if ( pessoasEndereco.getIdUf() == null ) {				this.mensaTela = "Estado incorreto.";			} else if ( pessoasEndereco.getIdMunicipios() == null ) {				this.mensaTela = "Escolher municipio";						} else {				pessoasEndereco.setCep(pessoasEndereco.getCep().replaceAll("\\D", ""));				pessoasEndereco.setTipo("C");				listaPessoasEnderecos.add(pessoasEndereco);			}		} else {			if ( !inscFederalValidador.replaceAll("[^0-9]", "").equals(pessoas.getInscFederal().replaceAll("[^0-9]", ""))) {				pessoasValidador = Validador.ValidaCPF(pessoas.getInscFederal().replaceAll("[^0-9]", ""),pessoas.getInscFederal());				mensaTela = pessoasValidador.getMensaValidaInscFederal();			}			// -- Verificar se é vendedor//			if ( seVendedor == 1 ) {//				if ( pessoasVendedor.getComissaoValor().compareTo(BigDecimal.ZERO) == 0 ) {//					mensaTela = "O colaborador, está como vendedor, mais está sem o valor de comissão, por favor colocar.";//				}//			}					}		if ( mensaTela.isEmpty() ) {			this.pessoas.setListaSetCursos(new HashSet<GradeCursosAlunos>());			pessoas.setPessoasPessoaTipos(new HashSet<PessoasPessoaTipo>());			pessoas.setListaSetDocumento(null);			pessoas.setListaSetSerasaCredito(null);			pessoas.setListaSetBloqueios(null);			pessoas.setListaSetFiscalCnaes(null);			if ( this.pessoas.getIDPessoa() == null ) {				this.pessoas.setPessoasUsuarioInclusao(dadosSistema.getUsuario().getPessoaUsuario());				this.pessoas.setPessoasUsuarioAlteracao(null);				this.pessoas.setDataInclusao(new Date());			} else {				this.pessoas.setPessoasUsuarioAlteracao(dadosSistema.getUsuario().getPessoaUsuario());				this.pessoas.setDataAlteracao(new Date());							}						try {				if ( pessoas.getApelido().isEmpty() ) pessoas.setApelido(pessoas.getNome());				} catch (Exception e) {				pessoas.setApelido(pessoas.getNome());			}							if ( (!pessoasContato.getEmailPrincipal().isEmpty()) || (pessoasContato.getTel1Numero() > 0) ) {				listaPessoasContatos.add(pessoasContato);			}						salvarPessoasSimples();			// -- Setando a pessoa do validator			inscFederalValidador = pessoas.getInscFederal();				inscEstadualValidador  = pessoas.getInscEstadual();							for ( PessoasPessoaTipo pPesTipo : pessoas.getPessoasPessoaTipos() ) {				if ( pPesTipo.getPessoasTipo().getIDPessoasTipo() == 4 ) {					PessoaTipoColaboradorConverter.listaPessoasTipo.add(pPesTipo);					break;				}			}					}  else {			if (pessoasValidador.getIDPessoa() != null )  {				for ( PessoasPessoaTipo pTipo : PessoasDelegate.getInstance().recuperarPessoasTipoPes(pessoasValidador.getIDPessoa(), dadosSistema.getUsuario().getNomeConexao())) {					if ( pTipo.getPessoasTipo().getIDPessoasTipo() == pessoaTipoBuscaSelected ) {						pessoasValidador.setDescricaoHistorico("");						break;					} else {						pessoasValidador.setDescricaoHistorico(pessoasValidador.getDescricaoHistorico()+" | "+pTipo.getPessoasTipo().getDescricao());					}				}				if ( !pessoasValidador.getDescricaoHistorico().isEmpty() ) {					pessoasValidador.setDescricaoHistorico(pessoasValidador.getDescricaoHistorico().replace("null |", ""));					RequestContext.getCurrentInstance().execute("PF('modalProcessar').hide()");					RequestContext.getCurrentInstance().execute("PF('dlCadSalvarOutroTipoCol').show()");				}			}		}			}				public void saveEmpresa() {		mensaTela = "";		if ( pessoas.getNome().length() < 5 ) {			mensaTela = "Digitar o nome, no mínimo 5 caracters.";		} else if ( pessoasEndereco.getCep().length() != 8 ) {			mensaTela = "Cep esta incorreto";		} else if ( pessoasEndereco.getEndereco().length() < 5 ) {			mensaTela = "Logradouro do endereco está incorreto";		} else if ( pessoasEndereco.getNumero().isEmpty() ) {			mensaTela = "Numero do endereço está incorreto";		} else if ( pessoasEndereco.getBairro().isEmpty() ) {			mensaTela = "Bairro está incorreto";		} else if ( pessoasEndereco.getIdUf() == null ) {			mensaTela = "Estado está incorreto";		} else if ( pessoasEndereco.getIdMunicipios() == null ) {			mensaTela = "Cidade está incorreto";					} else {			if ( !inscFederalValidador.equals(pessoas.getInscFederal().replaceAll("[^0-9]", ""))) {				mensaTela = Validador.ValidaCNPJ(pessoas.getInscFederal().replaceAll("[^0-9]", ""),pessoas.getInscFederal());							}			if ( mensaTela.isEmpty() )				if ( !inscEstadualValidador.equals(pessoas.getInscEstadual().replaceAll("[^0-9]", ""))) {					mensaTela = Validador.ValidaInscEstadual(pessoas.getInscEstadual(),pessoas.getInscEstadual());					}				 			}			if ( mensaTela.isEmpty() ) {						pessoas.setListaSetDocumento(null);			pessoas.setListaSetCursos(null);			pessoas.setListaSetBloqueios(null);			pessoas.setListaSetSerasaCredito(null);			pessoasContato.setListaSetTipos(new HashSet<PessoasContatoTipo>());			pessoasEndereco.setTipo("1");			listaPessoasEnderecos.add(pessoasEndereco);			listaPessoasContatos.add(pessoasContato);			salvarEmpresa();			// -- Setando a pessoa do validator			inscFederalValidador = pessoas.getInscFederal();				inscEstadualValidador  = pessoas.getInscEstadual();			if ( dadosSistema.getEmpresa().equals(pessoasEmpresa)) 				 dadosSistema.getEmpresa().setNfeAmbiente(pessoasEmpresa.getNfeAmbiente());		}			}			public void addEndereco () {		this.mensaTela = "";		if ( pessoasEndereco.getCep().replaceAll("\\D", "").length() != 8 ) {			this.mensaTela = "Cep incorreto.";				} else if ( pessoasEndereco.getEndereco().length() < 2 ) {			this.mensaTela = "Logradouro incorreto.";		} else if ( pessoasEndereco.getIdUf() == null ) {			this.mensaTela = "Estado incorreto.";		} else if ( pessoasEndereco.getIdMunicipios() == null ) {			this.mensaTela = "Escolher municipio";					} else if ( pessoasEndereco.getTipo().equals("0") ) {			this.mensaTela = "Escolher tipo contato";					}				// -- Quando o sistema não é Escolas		if ( dadosSistema.getQualSistemaERPA() != 3 ) {			if ( pessoasEndereco.getNumero().isEmpty() ) {				this.mensaTela = "Numero incorreto.";			} else if ( pessoasEndereco.getBairro().isEmpty() ) {				this.mensaTela = "Bairro incorreto.";			}		}				if ( mensaTela.isEmpty() ) {			listaPessoasEnderecos.add(pessoasEndereco);			pessoasEndereco = new PessoasEndereco();		} else {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}	}				public void removeEndereco () {		if ( pEnderecoSelected.getIDPessoaEndereco() != null ) {			pEnderecoSelected.setSituacao(0);			PessoasDelegate.getInstance().update(pEnderecoSelected, dadosSistema.getUsuario().getNomeConexao());					}		listaPessoasEnderecos.remove(pEnderecoSelected);	}		public void addContato () {			if ( dadosSistema.getQualSistemaERPA() == 3 ) {			pessoasContato.setListaSetTipos(new HashSet<PessoasContatoTipo>());		}		this.mensaTela = "";		// -- Quando o sistema não é Escolas		if ( dadosSistema.getQualSistemaERPA() != 3 ) {			if ( pessoasContato.getNome().length() < 2) {				if ( pessoaTipo == 'J' ) this.mensaTela = "Contato incorreto.";//			} else if ( pessoasContato.getDescricaoCargo().length() < 2 ) {//				this.mensaTela = "Cargo incorreto.";			} else if ( pessoasContato.getEmailPrincipal().length() < 3 ) {				this.mensaTela = "Email incorreto.";			} else if ( pessoasContato.getTel1Numero() < 1 ) {				this.mensaTela = "Numero incorreto";						}		} else {			if ( pessoasContato.getTel1Numero() < 1 ) {				this.mensaTela = "Numero incorreto";						}					}				if ( mensaTela.isEmpty() ) {			pessoasContato.setDescTelefones("("+pessoasContato.getTel1DDD()+") " + pessoasContato.getTel1Numero() +                     " - ("+pessoasContato.getTel2DDD()+") " + pessoasContato.getTel2Numero() +                    " - ("+pessoasContato.getTel3DDD()+") " + pessoasContato.getTel3Numero());			pessoasContato.setDescEmails(pessoasContato.getEmailPrincipal() + " / " + pessoasContato.getEmailSecundario());						if ( listaTipoContatoSelected != null) {				for ( TipoPessoaContato tipoContEsc : listaTipoContatoSelected ) {					PessoasContatoTipo pCliCont = new PessoasContatoTipo();					pCliCont.setTipoPessoaContato(tipoContEsc);					pCliCont.setPessoasContato(pessoasContato);					if (pessoasContato.getListaSetTipos() == null) pessoasContato.setListaSetTipos(new HashSet<PessoasContatoTipo>());					pessoasContato.getListaSetTipos().add(pCliCont);				}			} 						if ( pessoasContato.getIDPessoaContato() == null ) {				listaPessoasContatos.add(pessoasContato);			} else {				listaPessoasContatos.set(listaPessoasContatos.indexOf(pessoasContato), pessoasContato);			}			listaTipoContatoSelected = new ArrayList<TipoPessoaContato>();			pessoasContato = new PessoasContato();		} else {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}					}		public void addContatoColaborador () {					this.mensaTela = "";		if ( pessoasContato.getEmailPrincipal().length() < 3 ) {			this.mensaTela = "Email incorreto.";		} else if ( pessoasContato.getTel1Numero() < 1 ) {			this.mensaTela = "Numero incorreto";					}						if ( mensaTela.isEmpty() ) {			pessoasContato.setDescTelefones("("+pessoasContato.getTel1DDD()+") " + pessoasContato.getTel1Numero() +                     " - ("+pessoasContato.getTel2DDD()+") " + pessoasContato.getTel2Numero() +                    " - ("+pessoasContato.getTel3DDD()+") " + pessoasContato.getTel3Numero());			pessoasContato.setDescEmails(pessoasContato.getEmailPrincipal() + " / " + pessoasContato.getEmailSecundario());			if ( pessoasContato.getIDPessoaContato() == null ) {				listaPessoasContatos.add(pessoasContato);			} else {				listaPessoasContatos.set(listaPessoasContatos.indexOf(pessoasContato), pessoasContato);			}			pessoasContato = new PessoasContato();		} else {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}					}			public void removeContato () {			if ( pContatoSelected.getIDPessoaContato() != null ) {			pContatoSelected.setSituacao(0);			PessoasDelegate.getInstance().update(pContatoSelected, dadosSistema.getUsuario().getNomeConexao());					}		listaPessoasContatos.remove(pContatoSelected);			}			public void detalheContato () {		pessoasContato =  pessoaContatoSelected;		for ( PessoasContatoTipo pContatoTipo : pessoasContato.getListaSetTipos() ) {			listaTipoContatoSelected.add(pContatoTipo.getTipoPessoaContato());		}		pessoaContatoSelected = null;	}		public void saveTipoContrato () {		mensaTela = "";		if ( pessoasTipoContrato.getDescricao().length() < 3 ) {			mensaTela = "Descrição tipo contrato inválido ";		} else {			entityPersist = pessoasTipoContrato;			salvarPessoaGeral();			mensaTela = "Tipo Contrato salvo com sucesso.";			pessoasTipoContrato = new PessoasTipoContrato();		}		if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}			}		public void remTipoContrato () {		mensaTela = "";		if ( pessoas.getPessoasDados().getIdPessoasTipoContrato() == 0  ) {			mensaTela = "Precisa escolher uma das opções.";;		} else {			entityPersist = pessoasTipoContrato;			removePessoaGeral(pessoas.getPessoasDados().getIdPessoasTipoContrato());			if ( !mensaTela.isEmpty() ) {		        FacesMessage msg = new FacesMessage("", mensaTela);		        FacesContext.getCurrentInstance().addMessage(null, msg);						}				pessoas.getPessoasDados().setIdPessoasTipoContrato(0);		}		pessoasTipoContrato = new PessoasTipoContrato();	}			public void savePessoaHorarios () {		mensaTela = "";		if ( pessoasHorarios.getDescricao().length() < 3 ) {			mensaTela = "Descrição tipo horario inválido ";		} else {			entityPersist = pessoasHorarios;			salvarPessoaGeral();			mensaTela = "Horario salvo com sucesso.";			pessoasHorarios = new PessoasHorarios();		}		if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}			}	public void remPessoaHorarios () {				mensaTela = "";		if ( pessoasSalarios.getHorarioTipo().length() < 3  ) {			mensaTela = "Precisa escolher uma das opções.";			} else {		    entityPersist = pessoasHorarios;			for ( PessoasHorarios pHorario : PessoasHorariosConverter.listaHorarios) {				if ( pHorario.getDescricao().equalsIgnoreCase(pessoasSalarios.getHorarioTipo())) {					removePessoaGeral(pHorario.getIDPessoasHorarios());				}			}			if ( !mensaTela.isEmpty() ) {		        FacesMessage msg = new FacesMessage("", mensaTela);		        FacesContext.getCurrentInstance().addMessage(null, msg);						}			}		pessoasHorarios = new PessoasHorarios();				}				public void saveSindicato () {		mensaTela = "";		if ( !Validador.ValidaCNPJ(pessoasSindicato.getCnpj(),pessoasSindicato.getCnpj()).isEmpty() ) {			mensaTela = "Sindicato não foi salvo, CNPJ inválido.";		} else if ( pessoasSindicato.getNome().length() < 3 ) {			mensaTela = "Sindicato não foi salvo, Nome inválido ";		} else {			pessoasSindicato.setCnpj(pessoasSindicato.getCnpj().replaceAll("\\D", ""));			entityPersist = pessoasSindicato;			salvarPessoaGeral();			mensaTela = "Sindicato salvo com sucesso.";			pessoasSindicato = new PessoasSindicato();		}		if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}				System.out.println("menstela == " + mensaTela);	}		public void remSindicato () {		mensaTela = "";		if ( pessoas.getPessoasDados().getIdPessoasSindicato() == 0  ) {			mensaTela = "Precisa escolher uma das opções.";;		} else {			entityPersist = pessoasSindicato;			removePessoaGeral(pessoas.getPessoasDados().getIdPessoasSindicato());			if ( !mensaTela.isEmpty() ) {		        FacesMessage msg = new FacesMessage("", mensaTela);		        FacesContext.getCurrentInstance().addMessage(null, msg);						}				pessoas.getPessoasDados().setIdPessoasSindicato(0);		}		pessoasSindicato = new PessoasSindicato();	}	public void saveFgtsOcor () {		mensaTela = "";		 if ( pessoasFgtsOcor.getDescricao().length() < 3 ) {			mensaTela = "Descrição fgts ocorrência inválido ";		} else {			entityPersist = pessoasFgtsOcor;			salvarPessoaGeral();			mensaTela = "Fgts Ocorrência salvo com sucesso.";			pessoasFgtsOcor = new PessoasFgtsOcorrencia();		}		if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}			}		public void remFgtsOcor () {		mensaTela = "";		if ( pessoas.getPessoasDadosEmpresa().getFgtsOcorenciaID() == 0  ) {			mensaTela = "Precisa escolher uma das opções.";;		} else {			entityPersist = pessoasFgtsOcor;			removePessoaGeral(pessoas.getPessoasDadosEmpresa().getFgtsOcorenciaID());			if ( !mensaTela.isEmpty() ) {		        FacesMessage msg = new FacesMessage("", mensaTela);		        FacesContext.getCurrentInstance().addMessage(null, msg);						}				pessoas.getPessoasDadosEmpresa().setFgtsOcorenciaID(0);		}		pessoasFgtsOcor = new PessoasFgtsOcorrencia();	}			public void saveAssisMed () {		mensaTela = "";		 if ( pessoasAssistMedica.getDescricao().length() < 3 ) {			mensaTela = "Descrição médica inválido ";		} else {			entityPersist = pessoasAssistMedica;			salvarPessoaGeral();			mensaTela = "Assistência médica salvo com sucesso.";			pessoasAssistMedica = new PessoasAssistMedica();		}		if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}			}		public void remAssisMed () {		mensaTela = ""; 		if ( pessoas.getPessoasDadosEmpresa().getAssistMedicaID() == 0  ) {			mensaTela = "Precisa escolher uma das opções.";;		} else {			entityPersist = pessoasAssistMedica;			removePessoaGeral(pessoas.getPessoasDadosEmpresa().getAssistMedicaID());			if ( !mensaTela.isEmpty() ) {		        FacesMessage msg = new FacesMessage("", mensaTela);		        FacesContext.getCurrentInstance().addMessage(null, msg);						}				pessoas.getPessoasDadosEmpresa().setAssistMedicaID(0);		}		pessoasAssistMedica = new PessoasAssistMedica();	}			public void saveFuncao () {		mensaTela = "";		if ( pessoasFuncao.getDescricao().length() < 2 ) {			mensaTela = "Descrição função invália ";		} else {			entityPersist = pessoasFuncao;			salvarPessoaGeral();			mensaTela = "Função salvo com sucesso.";			pessoasFuncao = new PessoasFuncao();		}		if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}				}		public void remFuncao () {		mensaTela = "";		if ( pFuncaoSelected == null  ) {			mensaTela = "Precisa escolher uma das funções.";;		} else {			entityPersist = pFuncaoSelected;			removePessoaGeral(pFuncaoSelected.getIDPessoaFuncao());			if ( !mensaTela.isEmpty() ) {		        FacesMessage msg = new FacesMessage("", mensaTela);		        FacesContext.getCurrentInstance().addMessage(null, msg);						}			}		pFuncaoSelected = null;	}			public void addFuncoes () {		mensaTela = "";		adicionarFuncoes();				if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}				if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}							}		public void addSalarios () {		mensaTela = "";		adicionarSalarios();				if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}			}			public void addTreinamentos () {		mensaTela = "";		adicionarTreinamentos();				if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}			}		public void addDependentes () {		mensaTela = "";		adicionarDependentes();				if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}			}		public void addVeiculos () {		mensaTela = "";		adicionarVeiculos();				if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}			}			public void setarMunicipio () {		pessoasEndereco.setIdMunicipios(null);	}	    public void recuparLinkArquivo () {    	//    	TratamentoArquivos.destination = "pessoas_documentos/";	//    	for ( AuditoriaInternaRNC audIntRNC : auditoriaInterna.getListaSetRnc() ) {//			if ( !audIntRNC.getNomeArquivo().isEmpty() ) {//				audIntRNC.setLinkArquivo(TratamentoArquivos.GetCotacaoS3(audIntRNC.getNomeArquivo()));//				auditoriaInterna.getListaRnc().add(audIntRNC);//			}//    	}    	    	    }	public void setarTipoPessoa () {				mensaTela = "";		if ( veriTipoPessoa(pessoaTipoBuscaSelected)) {			pessoasValidador.setDescricaoHistorico("");			pessoas.setTipo(pessoaTipo);			pessoas = pessoasValidador;			PessoasPessoaTipo pTipo = new PessoasPessoaTipo();			pTipo.setPessoas(pessoas);			pTipo.setPessoasTipo(new PessoasTipo(pessoaTipoBuscaSelected));			pTipo.setSituacao(1);			try {				pTipo = (PessoasPessoaTipo) PessoasDelegate.getInstance().save(pTipo, dadosSistema.getUsuario().getNomeConexao());				mensaTela = "Pessoa vinculada ao tipo de pessoa corrente, com sucesso.";				pPessoaTipoSelected = pTipo;				getPessoaSelected();								pessoasValidador = new Pessoas();			} catch (Exception e) {				e.printStackTrace();				mensaTela = "Problemas, para vincular pessoas: " + e.getMessage();				pessoasValidador = new Pessoas();							}		} else {			mensaTela = "Pessoa já foi vinculada com esse tipo de pessoa";			pessoasValidador = new Pessoas();		}		showBotaoSetarPessoa = false;		}		public void setarTipoPessoaCol () {				mensaTela = "";		if ( veriTipoPessoa(pessoaTipoBuscaSelected)) {			pessoasValidador.setDescricaoHistorico("");			PessoasPessoaTipo pTipo = new PessoasPessoaTipo();			pTipo.setPessoas(pessoasValidador);			pTipo.setPessoasTipo(new PessoasTipo(pessoaTipoBuscaSelected));			pTipo.setSituacao(1);			try {				pTipo = (PessoasPessoaTipo) PessoasDelegate.getInstance().save(pTipo, dadosSistema.getUsuario().getNomeConexao());				mensaTela = "Pessoa vinculada ao tipo de pessoa corrente, com sucesso.";				pPessoaTipoSelected = pTipo;				pessoasValidador = new Pessoas();								getColaboradorSelected();			} catch (Exception e) {				e.printStackTrace();				mensaTela = "Problemas, para vincular pessoas: " + e.getMessage();				pessoasValidador = new Pessoas();							}		} else {			mensaTela = "Pessoa já foi vinculada com esse tipo de pessoa";			pessoasValidador = new Pessoas();		}		showBotaoSetarPessoa = false;		}			    	public void upLoadArquivo (FileUploadEvent event) {		try {						if ( descricaoArquivo.isEmpty() ) {				mensaTela = "Digitar uma descrição para o documento.";			} else {				TratamentoArquivos.destination = "pessoas_documentos/";					nomeArquivoTemp =Integer.toString(pessoas.getIDPessoa())+"_"+event.getFile().getFileName();				pessoasDocumentos.setNomeArquivo(nomeArquivoTemp);				TratamentoArquivos.CopyFile(nomeArquivoTemp, event.getFile().getInputstream());				pessoasDocumentos.setLink(TratamentoArquivos.GetCotacaoS3(nomeArquivoTemp));				pessoasDocumentos.setDescricao(descricaoArquivo);				pessoasDocumentos.setPessoas(pessoas);				if ( pessoas.getListaSetDocumento() == null ) pessoas.setListaSetDocumento(new HashSet<PessoasDocumentos>());				pessoas.getListaSetDocumento().add(pessoasDocumentos);				pessoasDocumentos = new PessoasDocumentos();				descricaoArquivo = "";				PessoasDelegate.getInstance().update(pessoas, dadosSistema.getUsuario().getNomeConexao());			}			if ( !mensaTela.isEmpty() ) {		        FacesMessage msg = new FacesMessage("", mensaTela);		        FacesContext.getCurrentInstance().addMessage(null, msg);						}					} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}			public void removeArquivo () {		try {			TratamentoArquivos.destination = "pessoas_documentos/";						TratamentoArquivos.RemoveFile(pessoasDoctoSelected.getNomeArquivo());					} catch (Exception e) {			// TODO: handle exception		}		nomeArquivoTemp = "";		if ( pessoas.getListaSetDocumento() == null ) pessoas.setListaSetDocumento(new HashSet<PessoasDocumentos>());		pessoas.getListaSetDocumento().remove(pessoasDoctoSelected);		PessoasDelegate.getInstance().update(pessoas, dadosSistema.getUsuario().getNomeConexao());	} 		public void upLoadCertificado (FileUploadEvent event) {		try {						TratamentoArquivos.destination = "pessoas_certificado/";				nomeArquivoTemp = event.getFile().getFileName();			pessoasEmpresa.setNfeNomeCertificado(nomeArquivoTemp);			pessoasEmpresa.setNfePathCertificado("pessoas_certificado/"+nomeArquivoTemp);			TratamentoArquivos.CopyFile(nomeArquivoTemp, event.getFile().getInputstream());			descricaoArquivo = "";			PessoasDelegate.getInstance().update(pessoasEmpresa, dadosSistema.getUsuario().getNomeConexao());			if ( !mensaTela.isEmpty() ) {		        FacesMessage msg = new FacesMessage("", mensaTela);		        FacesContext.getCurrentInstance().addMessage(null, msg);						}					} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}		public void removeCertificado () {		try {			TratamentoArquivos.destination = "pessoas_certificado/";						TratamentoArquivos.RemoveFile(pessoasEmpresa.getNfeNomeCertificado());			pessoasEmpresa.setNfeNomeCertificado("");			pessoasEmpresa.setNfePathCertificado("");			pessoasEmpresa.setNfePathCertificado_P12("");			PessoasDelegate.getInstance().update(pessoasEmpresa, dadosSistema.getUsuario().getNomeConexao());		} catch (Exception e) {			// TODO: handle exception		}	} 			public void upLoadArquivoLogo (FileUploadEvent event) {		try {			TratamentoArquivos.destination = "pessoas_logos/";				nomeArquivoTemp =Integer.toString(pessoas.getIDPessoa())+"_"+event.getFile().getFileName();			pessoasEmpresa.setLogoNomeArquivo(nomeArquivoTemp);			TratamentoArquivos.CopyFile(nomeArquivoTemp, event.getFile().getInputstream());			pessoasEmpresa.setLogoLinkArquivo(TratamentoArquivos.GetCotacaoS3(nomeArquivoTemp));			descricaoArquivo = "";			PessoasDelegate.getInstance().update(pessoasEmpresa, dadosSistema.getUsuario().getNomeConexao());		} catch (IOException e) {			mensaTela = "Problemas em upload logo.";			e.printStackTrace();		}						if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}					}		public void removeArquivoLogo () {		try {			TratamentoArquivos.destination = "pessoas_logos/";						TratamentoArquivos.RemoveFile(pessoasEmpresa.getLogoNomeArquivo());			pessoasEmpresa.setLogoLinkArquivo("");			pessoasEmpresa.setLogoNomeArquivo("");			PessoasDelegate.getInstance().update(pessoasEmpresa, dadosSistema.getUsuario().getNomeConexao());		} catch (Exception e) {			e.printStackTrace();		}		nomeArquivoTemp = "";		if ( pessoas.getListaSetDocumento() == null ) pessoas.setListaSetDocumento(new HashSet<PessoasDocumentos>());		pessoas.getListaSetDocumento().remove(pessoasDoctoSelected);		pessoas.setInscFederal(pessoas.getInscFederal().replaceAll("[^0-9]", ""));		PessoasDelegate.getInstance().update(pessoas, dadosSistema.getUsuario().getNomeConexao());	} 			public void addFiscalCnae () {		if ( cnaeSelected == null ) {			mensaTela = "Escolher o CNAB.";		} else {			PessoasFiscalCnaes pFiscalCnae = new PessoasFiscalCnaes();			pFiscalCnae.setDescricao(cnaeSelected.getDescricao());			pFiscalCnae.setPessoas(pessoas);			pFiscalCnae.setCnae(cnaeSelected);			pessoas.getListaSetFiscalCnaes().add(pFiscalCnae);					}				if ( !mensaTela.isEmpty() ) {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);					}		cnaeEntrada = "";		cnaeSelected = null;	}		public void remFiscalCnae () {		pessoas.getListaSetFiscalCnaes().remove(pessoasFCnaesSelected);	}		public void buscarCep () {				mensaTela = "";		cep.setarAcesso("ajudainformatic", "39Vd2B4");		try {			if ( pessoasEndereco.getCep().length() != 8 ) {				mensaTela = "Cep invalido para procura";				pessoasEndereco = new PessoasEndereco();			} else {								String cepRetorno  = cep.obterLogradouro(pessoasEndereco.getCep());				StringTokenizer st = new StringTokenizer(cepRetorno, ",");				int posiCampo = 0;				if ( !cepRetorno.contains("não encontrado")) {	                while ( st.hasMoreTokens() ) {	                    String campo = st.nextToken();	                    if ( posiCampo == 0 ) pessoasEndereco.setEndereco(campo);	                    if ( posiCampo == 1 ) pessoasEndereco.setBairro(campo);	                    if ( posiCampo == 3 ) {	                    	for ( IBGEUf uf : IBGEUfConverter.listaIbgeUF) {	                    		if ( uf.getUfSigla().trim().contains(campo.trim())) {	                    			pessoasEndereco.setIdUf(uf);	                    			break;	                    		}	                    	}	                    }	                    if ( posiCampo == 4 ) {	                    	for (  IBGEMunicipios muni : IBGEMunicipiosConverter.listaIbgeMuncicipios ) {	                    		if ( muni.getCodigo().trim().contains(campo.trim())) {	                    			pessoasEndereco.setIdMunicipios(muni);	                    			break;	                    		}	                    	}	                    }    	                    posiCampo ++;	                }    				} else {					mensaTela = "Cep não encontrado.";					pessoasEndereco = new PessoasEndereco();				}								if ( cepRetorno.contains("CEP Município")) {					pessoasEndereco.setEndereco("");					mensaTela = "Cep de munícipio, logradouro vai precisar preencher manual.";				}							}			if ( !mensaTela.isEmpty() ) {		        FacesMessage msg = new FacesMessage("", mensaTela);		        FacesContext.getCurrentInstance().addMessage(null, msg);						}										} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	public void serasaConsultaCadastro () {				Pessoas pessoaValida = null;		mensaTela = "";		if ( pessoaTipo == 'J') {			mensaTela = Validador.ValidaCNPJ(pessoas.getInscFederal().replaceAll("[^0-9]", ""),pessoas.getInscFederal());		} else {			pessoaValida = Validador.ValidaCPF(pessoas.getInscFederal().replaceAll("[^0-9]", ""),pessoas.getInscFederal());			mensaTela = pessoaValida.getMensaValidaInscFederal();		}						if ( mensaTela.isEmpty() ) {						int posiLogradouroNum = 0;			String logradouroSemNumCompl = "";			String retornoSerasaConsulta = WsSerasaCadastro.consultaCadastro(pessoas.getInscFederal());			serasaCadastro = new SerasaCadastro();			serasaCadastro.setSituacao(1);			serasaCadastro.setPessoaUsuario(dadosSistema.getUsuario().getPessoaUsuario());			serasaCadastro.setDataInclusao(new Date());			serasaCadastro.setConsulta_COMPLETA("");			StringTokenizer stPrincipal = new StringTokenizer(retornoSerasaConsulta, "|");	        try {					        while ( stPrincipal.hasMoreTokens() ) {		            String linha = stPrincipal.nextToken();		            int posiBusca = linha.indexOf("@");					serasaCadastro.setConsulta_COMPLETA(serasaCadastro.getConsulta_COMPLETA()+linha+"\n");			            					if ( posiBusca > 0 ) {								            serasaCadastro.setCnpj_CONSULTADO(linha.trim().substring(0, posiBusca).trim().contains("CNPJ")?linha.substring(posiBusca+1):serasaCadastro.getCnpj_CONSULTADO());			            serasaCadastro.setCodigo_CNAE(linha.trim().substring(0, posiBusca).trim().contains("CNAE")?linha.substring(posiBusca+1):serasaCadastro.getCodigo_CNAE());			            serasaCadastro.setRazao_SOCIAL(linha.trim().substring(0, posiBusca).trim().contains("RAZAO SOCIAL")?linha.substring(posiBusca+1):serasaCadastro.getRazao_SOCIAL());			            serasaCadastro.setNome_FANTASIA(linha.trim().substring(0, posiBusca).trim().contains("NOME FANTASIA")?linha.substring(posiBusca+1):serasaCadastro.getNome_FANTASIA());			            serasaCadastro.setCep(linha.trim().substring(0, posiBusca).trim().contains("CEP")?linha.substring(posiBusca+1):serasaCadastro.getCep());			            serasaCadastro.setLogradouro(linha.trim().substring(0, posiBusca).trim().contains("LOGRADOURO")?linha.substring(posiBusca+1):serasaCadastro.getLogradouro());			            serasaCadastro.setNome_DO_LOGRADOURO(linha.trim().substring(0, posiBusca).trim().contains("NOME DO LOGRADOURO")?linha.substring(posiBusca+1):serasaCadastro.getNome_DO_LOGRADOURO());			            serasaCadastro.setNumero(linha.trim().substring(0, posiBusca).trim().contains("NUMERO")?linha.substring(posiBusca+1):serasaCadastro.getNumero());			            serasaCadastro.setComplemento(linha.trim().substring(0, posiBusca).trim().contains("COMPLEMENTO")?linha.substring(posiBusca+1):serasaCadastro.getComplemento());			            serasaCadastro.setDdd_FONE(linha.trim().substring(0, posiBusca).trim().contains("DDD FONE")?linha.substring(posiBusca+1):serasaCadastro.getDdd_FONE());			            serasaCadastro.setDescricao_CIDADE(linha.trim().substring(0, posiBusca).trim().contains("CIDADE")?linha.substring(posiBusca+1):serasaCadastro.getDescricao_CIDADE());   			            serasaCadastro.setEstado(linha.trim().substring(0, posiBusca).trim().contains("ESTADO")?linha.substring(posiBusca+1):serasaCadastro.getEstado());			            serasaCadastro.setDescricao_DO_BAIRRO(linha.trim().substring(0, posiBusca).trim().contains("BAIRRO")?linha.substring(posiBusca+1):serasaCadastro.getDescricao_DO_BAIRRO());			            serasaCadastro.setTipo_LOGRADOURO(linha.trim().substring(0, posiBusca).trim().contains("TIPO LOGRADOURO")?linha.substring(posiBusca+1):serasaCadastro.getTipo_LOGRADOURO());			            serasaCadastro.setRamo_DE_ATIVIDADE(linha.trim().substring(0, posiBusca).trim().contains("RAMO DE ATIVIDADE")?linha.substring(posiBusca+1):serasaCadastro.getRamo_DE_ATIVIDADE());			            serasaCadastro.setRf_SITUACAO_CADASTRAL(linha.trim().substring(0, posiBusca).trim().contains("RF - SITUACAO")?linha.substring(posiBusca+1):serasaCadastro.getRf_SITUACAO_CADASTRAL());			            serasaCadastro.setRp_RP_CADASTRO(linha.trim().substring(0, posiBusca).trim().contains("RP_RP")?linha.substring(posiBusca+1):serasaCadastro.getRp_RP_CADASTRO());			            serasaCadastro.setDo_CRÉDITO_SOLICITADO(linha.trim().substring(0, posiBusca).trim().contains("DO - CRÉDITO")?linha.substring(posiBusca+1):serasaCadastro.getDo_CRÉDITO_SOLICITADO());			            serasaCadastro.setDo_TIPO_DE_CONSULTA(linha.trim().substring(0, posiBusca).trim().contains("DO - TIPO")?linha.substring(posiBusca+1):serasaCadastro.getDo_TIPO_DE_CONSULTA());  			            serasaCadastro.setSintegra_UF(linha.trim().substring(0, posiBusca).trim().contains("SINTEGRA - UF")?linha.substring(posiBusca+1):serasaCadastro.getSintegra_UF());			            serasaCadastro.setSintegra_INTERNO_INSCRICAO_ESTADUAL(linha.trim().substring(0, posiBusca).trim().contains("SINTEGRA INTERNO - INSCRICAO")?linha.substring(posiBusca+1):serasaCadastro.getSintegra_INTERNO_INSCRICAO_ESTADUAL());			            serasaCadastro.setSintegra_INTERNO_SITUACAO_CADASTRAL(linha.trim().substring(0, posiBusca).trim().contains("SINTEGRA INTERNO - SITUACAO")?linha.substring(posiBusca+1):serasaCadastro.getSintegra_INTERNO_SITUACAO_CADASTRAL());            					}		        }			        		        String isncFederal  = pessoas.getInscFederal();		        pessoas = new Pessoas();		        serasaCadastro.setCnpj_CONSULTADO(serasaCadastro.getCnpj_CONSULTADO().replaceAll("[^0-9]", ""));		        serasaCadastro.setConsulta_COMPLETA(serasaCadastro.getConsulta_COMPLETA().replace("@", " = "));		        pessoasEndereco = new PessoasEndereco();		        listaPessoasEnderecos.clear();		        mensaTela = "Dados foram capturados com sucesso. Verificar os dados e depois salvar.";		        pessoas.getListaSetFiscalCnaes().clear();		        pessoas.setNome(TratamentoCampos.AjustaTamanhoCampo(serasaCadastro.getRazao_SOCIAL().replace("#", ""),60));		        if ( !pessoas.getNome().isEmpty()) {			        			        pessoas.setApelido(TratamentoCampos.AjustaTamanhoCampo(serasaCadastro.getNome_FANTASIA().replace("#", ""),60));			        pessoas.setInscFederal(isncFederal.replace("#", ""));			        pessoas.setInscEstadual(TratamentoCampos.AjustaTamanhoCampo(serasaCadastro.getSintegra_INTERNO_INSCRICAO_ESTADUAL().replace("#", ""),15));			        pessoas.setInscEstadualDescSituacao("ATIVA");			        pessoas.setDataInclusao(new Date());			        if (serasaCadastro.getSintegra_INTERNO_SITUACAO_CADASTRAL().contains("NAO"))			        	pessoas.setInscEstadualDescSituacao("INATIVA");			        			        pessoasEndereco.setCep(TratamentoCampos.AjustaTamanhoCampo(serasaCadastro.getCep().replace("#", ""),8));				        posiLogradouroNum = serasaCadastro.getNome_DO_LOGRADOURO().indexOf(serasaCadastro.getNumero().replace("#", ""));			        			        if ( posiLogradouroNum  > 0 ) 			        	 logradouroSemNumCompl = serasaCadastro.getNome_DO_LOGRADOURO().substring(0, posiLogradouroNum);			        pessoasEndereco.setEndereco(TratamentoCampos.AjustaTamanhoCampo(logradouroSemNumCompl.replace("#", ""),60));			        pessoasEndereco.setNumero(TratamentoCampos.AjustaTamanhoCampo(serasaCadastro.getNumero().replace("#", ""),60));			        pessoasEndereco.setComplemento(TratamentoCampos.AjustaTamanhoCampo(serasaCadastro.getComplemento().replace("#", ""),60));			        pessoasEndereco.setBairro(TratamentoCampos.AjustaTamanhoCampo(serasaCadastro.getDescricao_DO_BAIRRO().replace("#", ""),60));			        pessoasEndereco.setCidade(TratamentoCampos.AjustaTamanhoCampo(serasaCadastro.getDescricao_CIDADE().replace("#", ""),60));			        for (IBGEMunicipios muni :  IBGEMunicipiosConverter.listaIbgeMuncicipios ) {			        	if ( muni.getNome().trim().replace("", "").equalsIgnoreCase(pessoasEndereco.getCidade().trim().replace("", ""))) {			        		pessoasEndereco.setIdMunicipios(muni);			        		break;			        	}			        }			        pessoasEndereco.setUf(serasaCadastro.getEstado().replace("#", ""));			        for (IBGEUf uf :  IBGEUfConverter.listaIbgeUF ) {			        	if ( uf.getUfSigla().trim().replace("", "").equalsIgnoreCase(pessoasEndereco.getUf().trim().replace("", ""))) {			        		pessoasEndereco.setIdUf(uf);			        		break;			        	}			        }		        			        pessoasEndereco.setTipo("1"); // -- Tipo contrato			        			        if ( (pessoasEndereco.getIdMunicipios() != null) && (pessoasEndereco.getUf() != null) ) { 			        	listaPessoasEnderecos.add(pessoasEndereco);			        	pessoasEndereco = new PessoasEndereco();			        } else {			        	mensaTela = "Dados foram capturados com ressalva, verificar.";			        }			        			        for ( Cnae cnae : CnaeConverter.listaCnae ) {			        	if ( cnae.getCodigo().equalsIgnoreCase(serasaCadastro.getCodigo_CNAE())) {			        		pessoas.getListaSetFiscalCnaes().add(new PessoasFiscalCnaes(cnae.getCodigo(),pessoas,cnae));				        	}			        }			        		        			        		        	PessoasDelegate.getInstance().save(serasaCadastro, dadosSistema.getUsuario().getNomeConexao());			        FacesMessage msg = new FacesMessage("", mensaTela);			        FacesContext.getCurrentInstance().addMessage(null, msg);			        		        } else {		        	mensaTela = "Dados de retorno, inválidos. Não podem ser usado como cadastro.";		        	//RequestContext.getCurrentInstance().execute("PF('wgSerasaRetorno').show()");		        }	        				} catch (Exception e) {				mensaTela = "Problemas com serasa: " + retornoSerasaConsulta; 		        FacesMessage msg = new FacesMessage("", "Problemas com serasa: \n" + e.getMessage() + "\nResposta:\n" + retornoSerasaConsulta);		        FacesContext.getCurrentInstance().addMessage(null, msg);		        e.printStackTrace();			}	        	        		} else {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);				}        	}		public void serasaConsultaCredito () {				mensaTela = "";				if ( mensaTela.isEmpty() ) {				String retornoSerasaConsulta = WsSerasaCredito.consultaCredito(pessoas.getInscFederal());			serasaCredito = new SerasaCredito();			serasaCredito.setSituacao(1);			serasaCredito.setPessoaUsuario(dadosSistema.getUsuario().getPessoaUsuario());			serasaCredito.setPessoas(pessoas);			serasaCredito.setDataInclusao(new Date());			serasaCredito.setConsulta_COMPLETA("");			StringTokenizer stPrincipal = new StringTokenizer(retornoSerasaConsulta, "\n");	        try {					        while ( stPrincipal.hasMoreTokens() ) {		            String linha = stPrincipal.nextToken();		            int posiBusca = linha.indexOf("=");					if ( posiBusca > 0 ) {											serasaCredito.setMsge_TIPO(linha.trim().substring(0, posiBusca).trim().equalsIgnoreCase("MSGE_TIPO")?linha.substring(posiBusca+1):serasaCredito.getMsge_TIPO());						serasaCredito.setMsge_DESC(linha.trim().substring(0, posiBusca).trim().equalsIgnoreCase("MSGE_DESC")?linha.substring(posiBusca+1):serasaCredito.getMsge_DESC());						serasaCredito.setLimite(linha.trim().substring(0, posiBusca).trim().equalsIgnoreCase("LIMITE")?linha.substring(posiBusca+1):serasaCredito.getLimite());						serasaCredito.setPolitica(linha.trim().substring(0, posiBusca).trim().equalsIgnoreCase("POLITICA")?linha.substring(posiBusca+1):serasaCredito.getPolitica());						serasaCredito.setRelatorio(linha.trim().substring(0, posiBusca).trim().contains("RELATORIO")?linha.substring(posiBusca+1):serasaCredito.getRelatorio());						serasaCredito.setErro(linha.trim().substring(0, posiBusca).trim().contains("ERRO")?linha.substring(posiBusca+1):serasaCredito.getErro());												serasaCredito.setConsulta_COMPLETA(linha.trim().substring(0, posiBusca).trim().contains("DADOSPOLITICA")?linha.substring(posiBusca+1):serasaCredito.getConsulta_COMPLETA());					}		        }			        		        // -- Quebrando linha do conteudo dos dados politicos		        String mensaDesc = "";				StringTokenizer stMensaDesc = new StringTokenizer(serasaCredito.getMsge_DESC(), "|");		        while ( stMensaDesc.hasMoreTokens() ) {		        	String linha = stMensaDesc.nextToken();		        	mensaDesc += linha+"\n";		        }		        serasaCredito.setMsge_DESC(mensaDesc);		        			    		        // -- Quebrando linha do conteudo dos dados politicos		        String dadosPoliticos = "";				StringTokenizer stDadosPolicicos = new StringTokenizer(serasaCredito.getConsulta_COMPLETA(), "|");		        while ( stDadosPolicicos.hasMoreTokens() ) {		        	String linha = stDadosPolicicos.nextToken();		        	dadosPoliticos += linha.replace("@", " = ").replace("#", "")+"\n";		        }		        serasaCredito.setConsulta_COMPLETA(dadosPoliticos);		        pessoas.getListaSetSerasaCredito().add(serasaCredito);		        String strValorLimite = serasaCredito.getLimite().replace(".", "");		        double valorLimite = Double.parseDouble(strValorLimite.replace(",", "."));		        pessoas.setValorCredito(new BigDecimal(valorLimite));		        FacesMessage msg = new FacesMessage("", "Retorno serasa concluido.");		        FacesContext.getCurrentInstance().addMessage(null, msg);	        				} catch (Exception e) {		        FacesMessage msg = new FacesMessage("", "Problemas com serasa");		        FacesContext.getCurrentInstance().addMessage(null, msg);		        e.printStackTrace();			}	        	        		} else {	        FacesMessage msg = new FacesMessage("", mensaTela);	        FacesContext.getCurrentInstance().addMessage(null, msg);				}        	}			public void serasaConsultaCreditoRemover () {				pessoas.getListaSetSerasaCredito().remove(serasaCredito);			}		public void serasaReciprocidade () {		arquivoSerasaReprocidade = "";		nomeArquivoTemp = "";		StringBuffer arquivoConteudo = new StringBuffer();		SimpleDateFormat formatar = new SimpleDateFormat("yyyy-MM-dd");   				FinanMovPagRec fPGFind = new FinanMovPagRec();		fPGFind.setSituacao(1);		fPGFind.setDataBuscaInicio(dataBuscaInicio);		fPGFind.setDataBuscaFinal(dataBuscaFim);		int nRegistro = 0;		int nRegistroRel = 0;				// -- Header - lpadTo(Integer.toString(nfSaida.getcNF())		arquivoConteudo.append("00");		arquivoConteudo.append(TratamentoCampos.lpadTo("RELATO COMP NEGOCIOS", 20, ' '));		arquivoConteudo.append(TratamentoCampos.lpadTo(dadosSistema.getPessoasEmpresa().getInscFederal(), 14, ' ')); // -- CNPJ - tam 14		arquivoConteudo.append(formatar.format(dataBuscaInicio).replace("-", "")); // -- dtini - tam 08		arquivoConteudo.append(formatar.format(dataBuscaFim).replace("-", "")); // -- dtini - tam 08		arquivoConteudo.append("S"); // 		arquivoConteudo.append(TratamentoCampos.lpadTo("", 15, ' ')); // reservado serasa		arquivoConteudo.append(TratamentoCampos.lpadTo("", 3, ' ')); // reservado serasa		arquivoConteudo.append(TratamentoCampos.lpadTo("", 29, ' ')); // reservado serasa		arquivoConteudo.append("V."); // Fixo "V"		arquivoConteudo.append("01"); // Fixo "01"		arquivoConteudo.append(TratamentoCampos.lpadTo("", 26, ' ')); // reservado serasa		arquivoConteudo.append("\n");						for ( FinanMovPagRec fMovPagRec : FinanceiroDelegate.getInstance().recuperarListaMovPagPeriodoSerasa(fPGFind, dadosSistema.getUsuario().getNomeConexao()) ) {						if ( arquivoConteudo.indexOf(fMovPagRec.getPessoas().getInscFederal()) == -1) {				// -- Detalhe Relacionamento				arquivoConteudo.append("01");				arquivoConteudo.append(TratamentoCampos.lpadTo(fMovPagRec.getPessoas().getInscFederal(), 14, ' ')); // -- CNPJ - tam 14				arquivoConteudo.append("01"); // -- '01' - tam 02				arquivoConteudo.append(formatar.format(fMovPagRec.getPessoas().getDataInclusao()).replace("-", "")); // -- Dtinclusao - tam 08				arquivoConteudo.append("2"); // -- Tipo de Cliente: 1 = Antigo; 2 = Menos de um ano; 3 = Inativo - tam 1				arquivoConteudo.append(TratamentoCampos.lpadTo("", 38, ' ')); // reservado serasa				arquivoConteudo.append(TratamentoCampos.lpadTo("", 34, ' ')); // reservado serasa				arquivoConteudo.append(TratamentoCampos.lpadTo("", 01, ' ')); // reservado serasa				arquivoConteudo.append(TratamentoCampos.lpadTo("", 30, ' ')); // reservado serasa				arquivoConteudo.append("\n");				nRegistroRel ++;			}						// -- Detalhe			arquivoConteudo.append("01");			arquivoConteudo.append(TratamentoCampos.lpadTo(fMovPagRec.getPessoas().getInscFederal(), 14, ' ')); // -- CNPJ - tam 14			arquivoConteudo.append("05"); // -- '05' - tam 02			arquivoConteudo.append(TratamentoCampos.lpadTo(Integer.toString(fMovPagRec.getIDFinanMovPagRec()), 10, '0')); // tam 10			arquivoConteudo.append(formatar.format(fMovPagRec.getDataMovimento()).replace("-", "")); // tam 8			arquivoConteudo.append(TratamentoCampos.lpadTo(Double.toString(fMovPagRec.getValorMovimento().doubleValue()).replace(".", ""), 13, '0')); // tam 13 - valor titulo						arquivoConteudo.append(formatar.format(fMovPagRec.getDataVencimento()).replace("-", "")); // tam 8			if ( fMovPagRec.getDataBaixa() != null ) {				arquivoConteudo.append(formatar.format(fMovPagRec.getDataBaixa()).replace("-", "")); // tam 8			} else {				arquivoConteudo.append(TratamentoCampos.lpadTo("", 8, ' ')); // tam 8			}			arquivoConteudo.append(TratamentoCampos.lpadTo("", 34, ' ')); // tam 34 Numero titulo maior que 10 posicoes			arquivoConteudo.append(TratamentoCampos.lpadTo("", 01, ' ')); // tam 1			arquivoConteudo.append(TratamentoCampos.lpadTo("", 24, ' ')); // tam 24			arquivoConteudo.append(TratamentoCampos.lpadTo("", 2, ' ')); // tam 2			arquivoConteudo.append(TratamentoCampos.lpadTo("", 1, ' ')); // tam 1			arquivoConteudo.append("\n");									nRegistro ++;					}		// -- Trailler		arquivoConteudo.append("99");		arquivoConteudo.append(TratamentoCampos.lpadTo(Integer.toString(nRegistroRel), 11, '0')); // -- tam 11 qtde registro		arquivoConteudo.append(TratamentoCampos.lpadTo("", 44, ' ')); // tam 44		arquivoConteudo.append(TratamentoCampos.lpadTo(Integer.toString(nRegistro), 11, '0')); // -- tam 11 qtde registro		arquivoConteudo.append(TratamentoCampos.lpadTo("", 11, ' ')); // tam 11		arquivoConteudo.append(TratamentoCampos.lpadTo("", 11, ' ')); // tam 11		arquivoConteudo.append(TratamentoCampos.lpadTo("", 10, ' ')); // tam 10		arquivoConteudo.append(TratamentoCampos.lpadTo("", 30, ' ')); // tam 30						if ( nRegistro > 0 ) {			FileWriter arquivo;			try {				arquivo = new FileWriter("/home/relatorios/" + "serasaReprocidade_" +										formatar.format(dataBuscaInicio).replace("-", "") + "_" +										formatar.format(dataBuscaFim).replace("-", "") + "_" +			                            dadosSistema.getUsuario().getIDPessoaLogin());				arquivo.write(arquivoConteudo.toString());			    arquivo.close();			    arquivoSerasaReprocidade = "/home/relatorios";			    nomeArquivoTemp =  "serasaReprocidade_" + formatar.format(dataBuscaInicio).replace("-", "") + "_" +									formatar.format(dataBuscaFim).replace("-", "") + "_" + dadosSistema.getUsuario().getIDPessoaLogin();			    mensaTela = "Arquivo criado com sucesso, clicar no botão download";			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();				mensaTela = "Problema para criação do arquivo";			}		} else {			SimpleDateFormat formatarB = new SimpleDateFormat("dd-MM-yyyy");   			mensaTela = "Não existe registro para o perido " + formatarB.format(dataBuscaInicio) + " até " + formatarB.format(dataBuscaFim) ;		}			}		public void upLoadArquivoSerasa (FileUploadEvent event) {		try {						mensaTela = "";			TratamentoArquivos.destination = "pessoas_documentos/";				nomeArquivoTemp =event.getFile().getFileName()+"_"+Integer.toString(dadosSistema.getUsuario().getIDPessoaLogin());			pessoasDocumentos.setNomeArquivo(nomeArquivoTemp);			TratamentoArquivos.CopyFile(nomeArquivoTemp, event.getFile().getInputstream());			mensaTela = "Arquivo foi processado com sucesso.";					} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}			/**	 *  Verificar Longitude e Lat	 * */	public void incluirLogELatPorLote( )  {		System.out.println("acesso");		systemSearchSelected.setConteudoBusca("");		systemSearchSelected.setTipoPessoaBusca(2);		// -- Verificar Reduncia de endereco da mesma pessoa com o mesmo cep		List<PessoasEndereco> listaEnderecos =  new ArrayList<>();		for ( PessoasPessoaTipo pessoaFind :  PessoasDelegate.getInstance().recuperarListaPessoasBusca(systemSearchSelected, dadosSistema.getUsuario().getNomeConexao()) ) {			PessoasEndereco pEnderecoFind = new PessoasEndereco();			pEnderecoFind.setPessoa(pessoaFind.getPessoas());			listaPessoasEnderecos = PessoasDelegate.getInstance().recuperarPessoasEndereco(pEnderecoFind, pessoasLoginConexao.getNomeConexao());			try {				if ( listaPessoasEnderecos.size() > 1 ) {					for (int i = 0; i < listaPessoasEnderecos.size(); i++) {						PessoasEndereco pEnd = listaPessoasEnderecos.get(i);						try {							if ( i > 0 ) PessoasDelegate.getInstance().remove(pEnd, pEnd.getIDPessoaEndereco(), pessoasLoginConexao.getNomeConexao());													} catch (Exception e) {							break;						}					}				}	else {					PessoasEndereco pEnd = listaPessoasEnderecos.get(0);					System.out.println("pEnderecoFind == " + pEnd.getIDPessoaEndereco() + " | " + pEnd.getCep() + " | " + pEnd.getLatitude() + " | " + pEnd.getLongitude() );					if ( pEnd.getLatitude() == null ) pEnd.setLatitude(BigDecimal.ZERO);					if ( pEnd.getLongitude() == null ) pEnd.setLongitude(BigDecimal.ZERO);					if  ( (pEnd.getLatitude().compareTo(BigDecimal.ZERO) == 0) ||  (pEnd.getLongitude().compareTo(BigDecimal.ZERO) == 0  ) )						 listaEnderecos.add(pEnd);				}			} catch (Exception e) {				// TODO: handle exception			}		}				System.out.println("lsitaEndereco = " + listaEnderecos.size());				 for ( PessoasEndereco pEnd :  listaEnderecos ) {			 // 		 	sEndDistanciaEmpresa =(VerificarLatitudeWS.verificarLat(pEnderecoEmpFind.getCep())+","+             // VerificarLatitudeWS.verificarLog(pEnderecoEmpFind.getCep()));			 try {				   	 				try {						int posiInicioLimparEnd = pEnd.getEndereco().indexOf("-");						pEnd.setEndereco( pEnd.getEndereco().substring(0, posiInicioLimparEnd));									} catch (Exception e) {						// TODO: handle exception				}				System.out.println("cep -> " +  pEnd.getCep() + " - ende =   " + pEnd.getNumero()+"+"+pEnd.getEndereco().replace(" ", "%20")+"+"+pEnd.getIdMunicipios().getNome().replace(" ", "%20")+"+"+pEnd.getIdUf().getUfSigla());				 				 								 try {					    System.out.println("Pelo CEP");						pEnd.setLatitude(new BigDecimal(VerificarLatitudeWS.verificarLat(pEnd.getCep())));						pEnd.setLongitude(new BigDecimal(VerificarLatitudeWS.verificarLog(pEnd.getCep())));					 				} catch (Exception e) {					System.out.println("Pelo Endereco");					  pEnd.setLatitude(new BigDecimal(VerificarLatitudeWS.verificarLat(pEnd.getNumero()+"+"+pEnd.getEndereco().replace(" ", "%20")+"+"+pEnd.getIdMunicipios().getNome().replace(" ", "%20")+"+"+pEnd.getIdUf().getUfSigla())));					  pEnd.setLongitude(new BigDecimal(VerificarLatitudeWS.verificarLog(pEnd.getNumero()+"+"+pEnd.getEndereco().replace(" ", "%20")+"+"+pEnd.getIdMunicipios().getNome().replace(" ", "%20")+"+"+pEnd.getIdUf().getUfSigla())));			  				}				 System.out.println("cep === : " + pEnd.getCep() + " = " + pEnd.getLatitude() + " - " + pEnd.getLongitude());				 if (!pEnd.getCep().isEmpty() ) {					 if (PessoasDelegate.getInstance().saveLatELongPessoaEndereco(pEnd, dadosSistema.getUsuario().getNomeConexao()) .equals("ERRO")) {						 break;					 }				 }							} catch (Exception e) {				System.out.println("cep erro  === : " + pEnd.getCep()  );				e.printStackTrace();			}		 }	}		 public void gerarCacerts () {		 NFeConfigNFe nfe = new NFeConfigNFe(dadosSistema.getEmpresa());		 nfe.gerarCacerts();	 }		public void reset() {	  setOpcao();	  RequestContext.getCurrentInstance().reset("conteudoCadastros:formCadPessoas:pCadPes");    }			public void resetSimplificado() {		  setOpcao();		  RequestContext.getCurrentInstance().reset("conteudoCadastros:formCadPessoasSimples:opCadPes");	    }						public Pessoas getPes() {		return pes;	}	public void setPes(Pessoas pes) {		this.pes = pes;	}	public DadosSistemaMB getDadosSistema() {		return dadosSistema;	}	public void setDadosSistema(DadosSistemaMB dadosSistema) {		this.dadosSistema = dadosSistema;	}	public List<TipoPessoaContato> getListaTipoContatoSelected() {		return listaTipoContatoSelected;	}	public void setListaTipoContatoSelected(			List<TipoPessoaContato> listaTipoContatoSelected) {		this.listaTipoContatoSelected = listaTipoContatoSelected;	}	public PessoasContato getPessoaContatoSelected() {		return pessoaContatoSelected;	}	public void setPessoaContatoSelected(PessoasContato pessoaContatoSelected) {		this.pessoaContatoSelected = pessoaContatoSelected;	}	public DataModelPessoasTipo getDataModelPessoasTipo() {		return dataModelPessoasTipo;	}	public void setDataModelPessoasTipo(DataModelPessoasTipo dataModelPessoasTipo) {		this.dataModelPessoasTipo = dataModelPessoasTipo;	}	public SystemSearch getSystemSearchSelected() {		return systemSearchSelected;	}	public void setSystemSearchSelected(SystemSearch systemSearchSelected) {		this.systemSearchSelected = systemSearchSelected;	}	public int getPessoaTipoBuscaSelected() {		return pessoaTipoBuscaSelected;	}	public void setPessoaTipoBuscaSelected(int pessoaTipoBuscaSelected) {		this.pessoaTipoBuscaSelected = pessoaTipoBuscaSelected;	}	public String getSystemSearchConteudo() {		return systemSearchConteudo;	}	public void setSystemSearchConteudo(String systemSearchConteudo) {		this.systemSearchConteudo = systemSearchConteudo;	}	public List<PessoasPessoaTipo> getListaPessoasTipoBusca() {		return listaPessoasTipoBusca;	}	public void setListaPessoasTipoBusca(			List<PessoasPessoaTipo> listaPessoasTipoBusca) {		this.listaPessoasTipoBusca = listaPessoasTipoBusca;	}	public int getTipoOperacao() {		return tipoOperacao;	}	public void setTipoOperacao(int tipoOperacao) {		this.tipoOperacao = tipoOperacao;	}	public String getArquivoSerasaReprocidade() {		return arquivoSerasaReprocidade;	}	public void setArquivoSerasaReprocidade(String arquivoSerasaReprocidade) {		this.arquivoSerasaReprocidade = arquivoSerasaReprocidade;	}	public Pessoas getPessoasValidador() {		return pessoasValidador;	}	public void setPessoasValidador(Pessoas pessoasValidador) {		this.pessoasValidador = pessoasValidador;	}	public void salvar() {		// TODO Auto-generated method stub			}	public String getInscFederalValidador() {		return inscFederalValidador;	}	public String getInscEstadualValidador() {		return inscEstadualValidador;	}	public void setInscFederalValidador(String inscFederalValidador) {		this.inscFederalValidador = inscFederalValidador;	}	public void setInscEstadualValidador(String inscEstadualValidador) {		this.inscEstadualValidador = inscEstadualValidador;	}	public String getInscFederalValidador_Segunda() {		return inscFederalValidador_Segunda;	}	public String getInscEstadualValidador_Segunda() {		return inscEstadualValidador_Segunda;	}	public void setInscFederalValidador_Segunda(String inscFederalValidador_Segunda) {		this.inscFederalValidador_Segunda = inscFederalValidador_Segunda;	}	public void setInscEstadualValidador_Segunda(			String inscEstadualValidador_Segunda) {		this.inscEstadualValidador_Segunda = inscEstadualValidador_Segunda;	}	public List<PessoasPessoaTipo> getFilterPessoasTipoBusca() {		return filterPessoasTipoBusca;	}	public void setFilterPessoasTipoBusca(List<PessoasPessoaTipo> filterPessoasTipoBusca) {		this.filterPessoasTipoBusca = filterPessoasTipoBusca;	}			}